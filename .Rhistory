group_by(cuisine_description) %>%
count(grade) %>%
spread(key = grade, value = n) %>%
mutate(total = rowSums(cbind(A, B, C), na.rm = TRUE)) %>%
filter(total >= 3000) %>%
plot_ly(x = ~cuisine_description, y = ~A, type = 'bar', name = 'A') %>%
add_trace(y = ~B, name = 'B') %>%
add_trace(y = ~C, name = 'C') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack') %>%
layout(margin = list(b = 75), xaxis = list(title = "", tickangle = 45)) # `margin` adjusts the space for the x-axis labels
get_all_inspections <- function(url) {
all_inspections = vector("list", length = 0)
loop_index = 1
chunk_size = 50000
DO_NEXT = TRUE
while (DO_NEXT) {
message("Getting data, page ", loop_index)
all_inspections[[loop_index]] =
GET(url,
query = list(`$order` = "zipcode",
`$limit` = chunk_size,
`$offset` = as.integer((loop_index - 1) * chunk_size)
)
) %>%
content("text") %>%
fromJSON() %>%
as_tibble()
DO_NEXT = dim(all_inspections[[loop_index]])[1] == chunk_size
loop_index = loop_index + 1
}
all_inspections
}
url = "https://data.cityofnewyork.us/resource/9w7m-hzhe.json"
nyc_restaurant_inspections <- get_all_inspections(url) %>%
bind_rows() %>%
rename(restaurant_id = camis, restaurant_name = dba) %>%
mutate(cuisine_description = if_else(cuisine_description == "CafÃ©/Coffee/Tea", "Cafe/coffee", cuisine_description),
cuisine_description = if_else(cuisine_description == "Latin (Cuban, Dominican, Puerto Rican, South & Central American)", "Latin", cuisine_description)) %>%
filter(is.na(grade) == FALSE)
nyc_restaurant_inspections %>%
filter(boro != "Missing") %>%
group_by(zipcode) %>%
mutate(num_restaurants_zip = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_zip)) %>%
plot_ly(y = ~num_restaurants_zip, color = ~boro, type = "box")
#I want the hover label to indicate the zip code corresponding to the number of restaurants, not the boro name, since that is already known--not sure if changing the hover text is possible for box plots
#This doesn't really work
manhattan_zip<- nyc_restaurant_inspections %>%
filter(boro == "MANHATTAN") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_man = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_man)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_man,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
brooklyn_zip<- nyc_restaurant_inspections %>%
filter(boro == "BROOKLYN") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_zip = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_zip)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_zip,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
queens_zip<- nyc_restaurant_inspections %>%
filter(boro == "QUEENS") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_zip = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_zip)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_zip,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
bronx_zip<- nyc_restaurant_inspections %>%
filter(boro == "BRONX") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_zip = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_zip)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_zip,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
staten_zip<- nyc_restaurant_inspections %>%
filter(boro == "STATEN ISLAND") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_zip = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_zip)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_zip,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
subplot(manhattan_zip, brooklyn_zip, queens_zip, bronx_zip, staten_zip, color = ~boro)
manhattan_zip<- nyc_restaurant_inspections %>%
filter(boro == "MANHATTAN") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_man = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_man)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_man,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
brooklyn_zip<- nyc_restaurant_inspections %>%
filter(boro == "BROOKLYN") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_zip = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_zip)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_zip,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
queens_zip<- nyc_restaurant_inspections %>%
filter(boro == "QUEENS") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_zip = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_zip)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_zip,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
bronx_zip<- nyc_restaurant_inspections %>%
filter(boro == "BRONX") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_zip = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_zip)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_zip,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
staten_zip<- nyc_restaurant_inspections %>%
filter(boro == "STATEN ISLAND") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_zip = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_zip)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_zip,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
subplot(manhattan_zip, brooklyn_zip, queens_zip, bronx_zip, staten_zip)
nyc_restaurant_inspections %>%
filter(boro == "MANHATTAN") %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_man = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_man)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_man,color= ~boro, type = "scatter", mode = "marker", text = ~text_label)
renderPlotly({
nyc_restaurant_inspections %>%
filter(boro == input$boro_choice) %>%
mutate(zipcode=as.character(zipcode)) %>%
group_by(zipcode) %>%
mutate(num_restaurants_man = n()) %>%
mutate(text_label = stringr::str_c("Zipcode:",zipcode, " Num_restaurants:", num_restaurants_man)) %>%
plot_ly(x= ~zipcode, y = ~num_restaurants_man,color= ~boro, type = "scatter", mode = "marker", text = ~text_label) %>%
layout(title = "Number of restaurants per zip code", margin = list(b = 75))
})
nyc_restaurant_inspections %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(grade_new == "A") %>%
drop_na() %>%
ggplot(aes(x = boro, y = score)) +
geom_violin()
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(httr)
library(jsonlite)
get_all_inspections <- function(url) {
all_inspections = vector("list", length = 0)
loop_index = 1
chunk_size = 50000
DO_NEXT = TRUE
while (DO_NEXT) {
message("Getting data, page ", loop_index)
all_inspections[[loop_index]] =
GET(url,
query = list(`$order` = "zipcode",
`$limit` = chunk_size,
`$offset` = as.integer((loop_index - 1) * chunk_size)
)
) %>%
content("text") %>%
fromJSON() %>%
as_tibble()
DO_NEXT = dim(all_inspections[[loop_index]])[1] == chunk_size
loop_index = loop_index + 1
}
all_inspections
}
url = "https://data.cityofnewyork.us/resource/9w7m-hzhe.json"
nyc_restaurant_inspections <- get_all_inspections(url) %>%
bind_rows() %>%
rename(restaurant_id = camis, restaurant_name = dba) %>%
mutate(cuisine_description = if_else(cuisine_description == "CafÃ©/Coffee/Tea", "Cafe/coffee", cuisine_description),
cuisine_description = if_else(cuisine_description == "Latin (Cuban, Dominican, Puerto Rican, South & Central American)", "Latin", cuisine_description)) %>%
filter(is.na(grade) == FALSE)
nyc_restaurant_inspections %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(grade_new == "A") %>%
drop_na() %>%
ggplot(aes(x = boro, y = score)) +
geom_violin()
nyc_restaurant_inspections %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(grade_new == "A") %>%
drop_na() %>%
plot_ly(y = ~score, color = ~boro, type = "box")
nyc_restaurant_inspections %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(grade_new == "A", boro != "Missing", score > 0 ) %>%
drop_na() %>%
plot_ly(y = ~score, color = ~boro, type = "box")
nyc_restaurant_inspections %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(grade_new == "A") %>%
drop_na() %>%
ggplot(aes(x = boro, y = score)) +
geom_violin()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='carolinadownie',
token='2539454EC7544D8C0DD454E18A97DC24',
secret='<SECRET>')
rsconnect::setAccountInfo(name='carolinadownie',
token='2539454EC7544D8C0DD454E18A97DC24',
secret='<SECRET>')
rsconnect::setAccountInfo(name='carolinadownie',
token='2539454EC7544D8C0DD454E18A97DC24',
secret='m+ewcw2jLZI3zUXTAoKVjZ2xZZg3EtRNFoqSLZTd')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('p8105_hw6_cgd2137_Prob2')
library(rsconnect)
rsconnect::deployApp('Users/cdownie27/Documents/Columbia/Semesters3/Data Science/Homeworks/p8105_cgd2137/p8105_hw6_cgd2137_Prob2')
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(httr)
library(jsonlite)
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(httr)
library(jsonlite)
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(httr)
library(jsonlite)
get_all_inspections <- function(url) {
all_inspections = vector("list", length = 0)
loop_index = 1
chunk_size = 50000
DO_NEXT = TRUE
while (DO_NEXT) {
message("Getting data, page ", loop_index)
all_inspections[[loop_index]] =
GET(url,
query = list(`$order` = "zipcode",
`$limit` = chunk_size,
`$offset` = as.integer((loop_index - 1) * chunk_size)
)
) %>%
content("text") %>%
fromJSON() %>%
as_tibble()
DO_NEXT = dim(all_inspections[[loop_index]])[1] == chunk_size
loop_index = loop_index + 1
}
all_inspections
}
url = "https://data.cityofnewyork.us/resource/9w7m-hzhe.json"
nyc_restaurant_inspections <- get_all_inspections(url) %>%
bind_rows() %>%
rename(restaurant_id = camis, restaurant_name = dba) %>%
mutate(cuisine_description = if_else(cuisine_description == "CafÃ©/Coffee/Tea", "Cafe/coffee", cuisine_description),
cuisine_description = if_else(cuisine_description == "Latin (Cuban, Dominican, Puerto Rican, South & Central American)", "Latin", cuisine_description)) %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(is.na(grade) == FALSE)
nyc_restaurant_inspections %>%
filter(grade_new %in% c("A", "B", "C")) %>%
select(cuisine_description, grade_new) %>%
group_by(cuisine_description) %>%
count(grade_new) %>%
spread(key = grade_new, value = n) %>%
mutate(total = rowSums(cbind(A, B, C), na.rm = TRUE)) %>%
filter(total >= 3000) %>%
plot_ly(x = ~cuisine_description, y = ~A, type = 'bar', name = 'A') %>%
add_trace(y = ~B, name = 'B') %>%
add_trace(y = ~C, name = 'C') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack') %>%
layout(margin = list(b = 75), xaxis = list(title = "", tickangle = 45))
#Plotly
nyc_restaurant_inspections %>%
filter(grade_new == "A", boro != "Missing", score > 0 ) %>%
drop_na() %>%
plot_ly(y = ~score, color = ~boro, type = "box")
nyc_restaurant_inspections %>%
filter(grade_new == "A", boro != "Missing", score > 0 ) %>%
drop_na() %>%
plot_ly(y = ~score, color = ~zipcode, type = "box")
nyc_restaurant_inspections %>%
filter(grade_new == "A", boro == "MANHATTAN", score > 0 ) %>%
drop_na() %>%
plot_ly(y = ~score, color = ~zipcode, type = "box")
nyc_restaurant_inspections %>%
filter(grade_new == "A", boro == "STATEN ISLAND", score > 0 ) %>%
mutate(zipcode = as.character(zipcode)) %>%
drop_na() %>%
plot_ly(y = ~score, color = ~zipcode, type = "box")
nyc_restaurant_inspections %>%
filter(grade_new == "A", boro == "STATEN ISLAND", score > 0 ) %>%
mutate(zipcode = as.character(zipcode)) %>%
drop_na() %>%
plot_ly(y = ~score, x = ~zipcode, color = ~zipcode, type = "box")
letter_grade <- nyc_restaurant_inspections %>% distinct(grade_new) %>% pull()
# radioButtons widget
radioButtons("grade_choice", label = h3("Choose letter grade"),
choices = letter_grade,
selected = "A")
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(shiny)
library(httr)
library(jsonlite)
letter_grade <- nyc_restaurant_inspections %>% distinct(grade_new) %>% pull()
# radioButtons widget
radioButtons("grade_choice", label = h3("Choose letter grade"),
choices = letter_grade,
selected = "A")
```
renderPlotly({
nyc_restaurant_inspections %>%
filter(grade_new == input$grade_choice, score > 0 ) %>%
drop_na() %>%
plot_ly(y = ~score, color = ~boro, type = "box")
})
room_choice = airbnb_data %>% distinct(room_type) %>% pull()
# radioButtons widget
radioButtons("room_choice", label = h3("Choose room type"),
choices = room_choice,
selected = "Entire home/apt")
```
radioButtons("grade_choice", label = h3("Choose letter grade"),
choices = letter_grade,
selected = "A")
renderPlotly({
nyc_restaurant_inspections %>%
filter(grade_new == input$grade_choice, score > 0 ) %>%
drop_na() %>%
plot_ly(y = ~score, color = ~boro, type = "box")
})
grade_choice <- nyc_restaurant_inspections %>% distinct(grade_new) %>% pull()
# radioButtons widget
radioButtons("grade_choice", label = h3("Choose letter grade"),
choices = grade_choice,
selected = "A")
renderPlotly({
nyc_restaurant_inspections %>%
filter(grade_new == input$grade_choice, score > 0 ) %>%
drop_na() %>%
plot_ly(y = ~score, color = ~boro, type = "box")
})
boros <- nyc_restaurant_inspections %>%
filter(boro != "Missing") %>%
distinct(boro) %>% pull()
# selectInput widget
selectInput("boro_choice", label = h3("Select Borough"),
choices = boros, selected = "MANHATTAN")
grade_choice <- nyc_restaurant_inspections %>% distinct(grade_new) %>% pull()
# radioButtons widget
radioButtons("grade_choice", label = h3("Choose letter grade"),
choices = grade_choice,
selected = "A")
boros <- nyc_restaurant_inspections %>%
filter(boro != "Missing") %>%
distinct(boro) %>% pull()
# selectInput widget
selectInput("boro_choice", label = h3("Select Borough"),
choices = boros, selected = "MANHATTAN")
grade_choice <- nyc_restaurant_inspections %>% distinct(grade_new) %>% pull()
# radioButtons widget
radioButtons("grade_choice", label = h3("Choose letter grade"),
choices = grade_choice,
selected = "A")
# Chunk 1: setup
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(shiny)
library(httr)
library(jsonlite)
# Chunk 2: loading and cleaning restaurant inspection data
get_all_inspections <- function(url) {
all_inspections = vector("list", length = 0)
loop_index = 1
chunk_size = 50000
DO_NEXT = TRUE
while (DO_NEXT) {
message("Getting data, page ", loop_index)
all_inspections[[loop_index]] =
GET(url,
query = list(`$order` = "zipcode",
`$limit` = chunk_size,
`$offset` = as.integer((loop_index - 1) * chunk_size)
)
) %>%
content("text") %>%
fromJSON() %>%
as_tibble()
DO_NEXT = dim(all_inspections[[loop_index]])[1] == chunk_size
loop_index = loop_index + 1
}
all_inspections
}
url = "https://data.cityofnewyork.us/resource/9w7m-hzhe.json"
nyc_restaurant_inspections <- get_all_inspections(url) %>%
bind_rows() %>%
rename(restaurant_id = camis, restaurant_name = dba) %>%
mutate(cuisine_description = if_else(cuisine_description == "CafÃ©/Coffee/Tea", "Cafe/coffee", cuisine_description),
cuisine_description = if_else(cuisine_description == "Latin (Cuban, Dominican, Puerto Rican, South & Central American)", "Latin", cuisine_description)) %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(is.na(grade) == FALSE)
nyc_restaurant_inspections <- get_all_inspections(url) %>%
bind_rows() %>%
rename(restaurant_id = camis, restaurant_name = dba) %>%
mutate(cuisine_description = if_else(cuisine_description == "CafÃ©/Coffee/Tea", "Cafe/coffee", cuisine_description),
cuisine_description = if_else(cuisine_description == "Latin (Cuban, Dominican, Puerto Rican, South & Central American)", "Latin", cuisine_description)) %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(is.na(grade) == FALSE)
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(shiny)
library(httr)
library(jsonlite)
get_all_inspections <- function(url) {
all_inspections = vector("list", length = 0)
loop_index = 1
chunk_size = 50000
DO_NEXT = TRUE
while (DO_NEXT) {
message("Getting data, page ", loop_index)
all_inspections[[loop_index]] =
GET(url,
query = list(`$order` = "zipcode",
`$limit` = chunk_size,
`$offset` = as.integer((loop_index - 1) * chunk_size)
)
) %>%
content("text") %>%
fromJSON() %>%
as_tibble()
DO_NEXT = dim(all_inspections[[loop_index]])[1] == chunk_size
loop_index = loop_index + 1
}
all_inspections
}
url = "https://data.cityofnewyork.us/resource/9w7m-hzhe.json"
nyc_restaurant_inspections <- get_all_inspections(url) %>%
bind_rows() %>%
rename(restaurant_id = camis, restaurant_name = dba) %>%
mutate(cuisine_description = if_else(cuisine_description == "CafÃ©/Coffee/Tea", "Cafe/coffee", cuisine_description),
cuisine_description = if_else(cuisine_description == "Latin (Cuban, Dominican, Puerto Rican, South & Central American)", "Latin", cuisine_description)) %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(is.na(grade) == FALSE)
View(nyc_restaurant_inspections)
